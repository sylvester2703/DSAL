#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
using namespace std;

class GraphAdjList {
public:
    unordered_map<string, vector<pair<string, int>>> graph;

    void addEdge(const string& u, const string& v, int cost) {
        graph[u].push_back({v, cost});
        graph[v].push_back({u, cost}); // Since the graph is undirected
    }

    void dfs(const string& node, unordered_set<string>& visited) {
        visited.insert(node);
        for (const auto& neighbor : graph[node]) {
            if (visited.find(neighbor.first) == visited.end()) {
                dfs(neighbor.first, visited);
            }
        }
    }

    bool isConnected() {
        if (graph.empty()) return true;

        unordered_set<string> visited;
        dfs(graph.begin()->first, visited);

        return visited.size() == graph.size();
    }

    void displayGraph() {
        for (const auto& node : graph) {
            cout << node.first << ": ";
            for (const auto& neighbor : node.second) {
                cout << "(" << neighbor.first << ", " << neighbor.second << ") ";
            }
            cout << endl;
        }
    }
};

int main() {
    GraphAdjList g;
    int n;
    cout << "Enter number of edges: ";
    cin >> n;

    cout << "Enter edges in the format: node1 node2 cost\n";
    for (int i = 0; i < n; ++i) {
        string u, v;
        int cost;
        cin >> u >> v >> cost;
        g.addEdge(u, v, cost);
    }

    cout << "\nGraph representation (Adjacency List):" << endl;
    g.displayGraph();

    cout << "\nIs the graph connected? " << (g.isConnected() ? "Yes" : "No") << endl;

    return 0;
}
/*
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <string>
using namespace std;
class GraphAdjList {
public:
    map<string, vector<pair<string, int> > > graph;
    void addEdge(const string& u, const string& v, int cost) {
        graph[u].push_back(make_pair(v, cost));
        graph[v].push_back(make_pair(u, cost)); // undirected
    }
    void dfs(const string& node, set<string>& visited) {
        visited.insert(node);
        vector<pair<string, int> >& neighbors = graph[node];

        for (size_t i = 0; i < neighbors.size(); ++i) {
            string neighborNode = neighbors[i].first;
            if (visited.find(neighborNode) == visited.end()) {
                dfs(neighborNode, visited);
            }
        }
    }
    bool isConnected() {
        if (graph.empty()) return true;

        set<string> visited;
        dfs(graph.begin()->first, visited);

        return visited.size() == graph.size();
    }
    void displayGraph() {
        map<string, vector<pair<string, int> > >::iterator it;
        for (it = graph.begin(); it != graph.end(); ++it) {
            cout << it->first << ": ";
            vector<pair<string, int> >& neighbors = it->second;

            for (size_t i = 0; i < neighbors.size(); ++i) {
                cout << "(" << neighbors[i].first << ", " << neighbors[i].second << ") ";
            }
            cout << endl;
        }
    }
};
int main() {
    GraphAdjList g;
    int n;
    cout << "Enter number of edges: ";
    cin >> n;
    cout << "Enter edges in the format: node1 node2 cost\n";
    for (int i = 0; i < n; ++i) {
        string u, v;
        int cost;
        cin >> u >> v >> cost;
        g.addEdge(u, v, cost);
    }
    cout << "\nGraph representation (Adjacency List):" << endl;
    g.displayGraph();

    cout << "\nIs the graph connected? " << (g.isConnected() ? "Yes" : "No") << endl;
    return 0;
}
/*
