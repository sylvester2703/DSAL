/*
#include<iostream>
using namespace std;
struct Node {
   int data;
   Node* left;
   Node* right;
   Node(int val) : data(val), left(nullptr), right(nullptr) {}
};
Node* insert(Node* root, int val) {
   if (!root) return new Node(val);
   if (val < root->data)
      root->left = insert(root->left, val);
   else
      root->right = insert(root->right, val);
   return root;
}
int findHeight(Node* root) {
   if (!root) return 0;
   int leftHeight = findHeight(root->left);
   int rightHeight = findHeight(root->right);
   return 1 + max(leftHeight, rightHeight);
}
int findMin(Node* root) {
   if (!root) return -1; 
      root = root->left;
   return root->data;
}
void mirror(Node* root) {
   if (!root) return;
   swap(root->left, root->right);
   mirror(root->left);
   mirror(root->right);
}
bool search(Node* root, int val) {
   if (!root) return false;
   if (root->data == val) return true;
   if (val < root->data)
      return search(root->left, val);
   return search(root->right, val);
}
void inorder(Node* root) {
   if (!root) return;
   inorder(root->left);
   cout << root->data << " ";
   inorder(root->right);
}
int main() {
   Node* root = nullptr;
   int numNodes, val, newNode, searchValue;
   cout << "Enter the number of nodes to insert into the BST: ";
   cin >> numNodes;
   cout << "Enter the values to insert into the BST:\n";
   for (int i = 0; i < numNodes; i++) {
      cin >> val;
      root = insert(root, val);
   }
   cout << "Inorder traversal of the BST: ";
   inorder(root);
   cout << endl;
   cout << "Enter a new node to insert into the BST: ";
   cin >> newNode;
   root = insert(root, newNode);
   cout << "Inorder traversal after inserting " << newNode << ": ";
   inorder(root);
   cout << endl;
   int height = findHeight(root);
   cout << "Number of nodes in the longest path (height): " << height << endl;
   int minValue = findMin(root);
   cout << "Minimum data value in the BST: " << minValue << endl;
   cout << "Enter a value to search in the BST: ";
   cin >> searchValue;
   bool isFound = search(root, searchValue);
   cout << "Search for " << searchValue << ": " << (isFound ? "Found" : "Not Found") << endl;
   mirror(root);
   cout << "Inorder traversal after mirroring the tree: ";
   inorder(root);
   cout << endl;
   return 0;
}
*/
#include <iostream>
using namespace std;
struct Node {
    int data;
    Node *left, *right;
    Node(int val) : data(val), left(NULL), right(NULL) {}
};
class BST {
public:
    Node* insert(Node* root, int key) {
        if (!root) return new Node(key);
        if (key < root->data) root->left = insert(root->left, key);
        else root->right = insert(root->right, key);
        return root;
    }
    int height(Node* root) {
        if (!root) return 0;
        return 1 + max(height(root->left), height(root->right));
    }
    int findMin(Node* root) {
        if (!root) return -1; // Edge case if root is NULL
        while (root->left) root = root->left;
        return root->data;
    }
    void mirror(Node* root) {
        if (root) {
            swap(root->left, root->right);
            mirror(root->left);
            mirror(root->right);
        }
    }
    bool search(Node* root, int key) {
        if (!root) return false;
        if (root->data == key) return true;
        if (key < root->data)
            return search(root->left, key);
        else
            return search(root->right, key);
    }
    void inorder(Node* root) {
        if (root) {
            inorder(root->left);
            cout << root->data << " ";
            inorder(root->right);
        }
    }
};
int main() {
    BST tree;
    Node* root = NULL;
    int n, val;
    cout << "Enter number of nodes to insert: ";
    cin >> n;
    cout << "Enter " << n << " node values:\n";
    for (int i = 0; i < n; ++i) {
        cin >> val;
        root = tree.insert(root, val);
    }
    cout << "\nInorder Traversal: ";
    tree.inorder(root);
    cout << "\n";
    cout << "Height of Tree (Longest Path): " << tree.height(root) << endl;
    cout << "Minimum Value in Tree: " << tree.findMin(root) << endl;
    cout << "Enter value to search: ";
    cin >> val;
    if (tree.search(root, val))
        cout << "Value Found\n";
    else
        cout << "Value Not Found\n";
    cout << "Enter value to insert as new node: ";
    cin >> val;
    root = tree.insert(root, val);
    cout << "Tree after inserting new node (Inorder): ";
    tree.inorder(root);
    cout << "\n";
    tree.mirror(root);
    cout << "Tree after mirroring (Inorder): ";
    tree.inorder(root);
    cout << "\n";
    return 0;
}

