#include <iostream>
#include <vector>
#include <algorithm>
#include <limits> // For numeric_limits

using namespace std;

// Function to heapify a subtree rooted with node i which is
// an index in arr[]. n is size of heap
void minHeapify(vector<int>& arr, int n, int i) {
    int smallest = i; // Initialize smallest as root
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    // If left child is smaller than root
    if (left < n && arr[left] < arr[smallest])
        smallest = left;

    // If right child is smaller than the smallest so far
    if (right < n && arr[right] < arr[smallest])
        smallest = right;

    // If smallest is not root
    if (smallest != i) {
        swap(arr[i], arr[smallest]);

        // Recursively heapify the affected sub-tree
        minHeapify(arr, n, smallest);
    }
}

// Function to build a min-heap from a given array
void buildMinHeap(vector<int>& arr) {
    int n = arr.size();
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        minHeapify(arr, n, i);
}

// Function to heapify a subtree rooted with node i which is
// an index in arr[]. n is size of heap
void maxHeapify(vector<int>& arr, int n, int i) {
    int largest = i; // Initialize largest as root
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    // If left child is larger than root
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // If right child is larger than the largest so far
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // If largest is not root
    if (largest != i) {
        swap(arr[i], arr[largest]);

        // Recursively heapify the affected sub-tree
        maxHeapify(arr, n, largest);
    }
}

// Function to build a max-heap from a given array
void buildMaxHeap(vector<int>& arr) {
    int n = arr.size();
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        maxHeapify(arr, n, i);
}

int findMaximumMarks(vector<int> marks) {
    if (marks.empty()) {
        cerr << "Error: Empty list of marks." << endl;
        return numeric_limits<int>::min(); // Return minimum possible integer value
    }
    buildMaxHeap(marks);
    return marks[0]; // The root of the max-heap is the maximum element
}

int findMinimumMarks(vector<int> marks) {
    if (marks.empty()) {
        cerr << "Error: Empty list of marks." << endl;
        return numeric_limits<int>::max(); // Return maximum possible integer value
    }
    buildMinHeap(marks);
    return marks[0]; // The root of the min-heap is the minimum element
}

int main() {
    // Hardcoded input for the number of students and their marks
    vector<int> marks = {55, 82, 38, 91, 60, 42, 75};
    int numStudents = marks.size();

    cout << "Marks obtained by students: ";
    for (int mark : marks) {
        cout << mark << " ";
    }
    cout << endl;

    int maximumMarks = findMaximumMarks(marks);
    int minimumMarks = findMinimumMarks(marks);

    if (maximumMarks != numeric_limits<int>::min() && minimumMarks != numeric_limits<int>::max()) {
        cout << "\nMaximum marks obtained: " << maximumMarks << endl;
        cout << "Minimum marks obtained: " << minimumMarks << endl;
    }

    return 0;
}

/*
#include <iostream>
#include <vector>
#include <algorithm>
#include <limits> // For numeric_limits

using namespace std;

// Function to heapify a subtree rooted with node i (for min-heap)
void minHeapify(vector<int>& arr, int n, int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] < arr[smallest])
        smallest = left;

    if (right < n && arr[right] < arr[smallest])
        smallest = right;

    if (smallest != i) {
        swap(arr[i], arr[smallest]);
        minHeapify(arr, n, smallest);
    }
}

// Function to build a min-heap
void buildMinHeap(vector<int>& arr) {
    int n = arr.size();
    for (int i = n / 2 - 1; i >= 0; i--)
        minHeapify(arr, n, i);
}

// Function to heapify a subtree rooted with node i (for max-heap)
void maxHeapify(vector<int>& arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        maxHeapify(arr, n, largest);
    }
}

// Function to build a max-heap
void buildMaxHeap(vector<int>& arr) {
    int n = arr.size();
    for (int i = n / 2 - 1; i >= 0; i--)
        maxHeapify(arr, n, i);
}

// Find maximum marks using max-heap
int findMaximumMarks(vector<int> marks) {
    if (marks.empty()) {
        cerr << "Error: Empty list of marks." << endl;
        return numeric_limits<int>::min();
    }
    buildMaxHeap(marks);
    return marks[0];
}

// Find minimum marks using min-heap
int findMinimumMarks(vector<int> marks) {
    if (marks.empty()) {
        cerr << "Error: Empty list of marks." << endl;
        return numeric_limits<int>::max();
    }
    buildMinHeap(marks);
    return marks[0];
}

int main() {
    int numStudents;
    cout << "Enter the number of students: ";
    cin >> numStudents;

    if (numStudents <= 0) {
        cerr << "Invalid number of students." << endl;
        return 1;
    }

    vector<int> marks(numStudents);
    cout << "Enter the marks for each student:\n";
    for (int i = 0; i < numStudents; ++i) {
        cout << "Student " << i + 1 << ": ";
        cin >> marks[i];
    }

    cout << "\nMarks obtained by students: ";
    for (int mark : marks) {
        cout << mark << " ";
    }
    cout << endl;
    int maximumMarks = findMaximumMarks(marks);
    int minimumMarks = findMinimumMarks(marks);
    if (maximumMarks != numeric_limits<int>::min() && minimumMarks != numeric_limits<int>::max()) {
        cout << "\nMaximum marks obtained: " << maximumMarks << endl;
        cout << "Minimum marks obtained: " << minimumMarks << endl;
    }
    return 0;
}

*/
